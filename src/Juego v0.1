<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>Making your first Phaser 3 Game - Part 10</title>
    <script src="//cdn.jsdelivr.net/npm/phaser@3.11.0/dist/phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

var config = {
    type: Phaser.AUTO,
    width: 1920,
    height: 1080,
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 400 },
            debug: false
        }
    },
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

var player;
var stars;
var bombs;
var platforms;
var cursors;
var score = 0;
var gameOver = false;
var scoreText;

var game = new Phaser.Game(config);

function preload ()
{
    this.load.image('escalera1','assets/escalera1.png')
    this.load.image('escaleradefault','assets/escaleradefault.png')
    this.load.image('suelo','assets/suelo.png')
    this.load.image('fondo','assets/fondo.png')
    this.load.image('sky', 'assets/sky.png');
    this.load.image('ground', 'assets/platform.png');
    this.load.image('star', 'assets/star.png');
    this.load.image('bomb', 'assets/bomb.png');
    this.load.spritesheet('dude', 'assets/dude.png', { frameWidth: 32, frameHeight: 48 });
    this.load.spritesheet('mainch', 'assets/mainch.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('mainchizq', 'assets/mainchizq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('escopder', 'assets/escopder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('escopizq', 'assets/escopizq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('glockizq', 'assets/glockizq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('glockder', 'assets/glockder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('v2der', 'assets/v2der.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('v2izq', 'assets/v2izq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('mangumder', 'assets/mangumder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('mangumizq', 'assets/mangumder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('francoder', 'assets/francoder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('francoizq', 'assets/francoizq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('uzider', 'assets/uzider.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('uziizq', 'assets/uziizq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('m4der', 'assets/m4der.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('m4izq', 'assets/m4izq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('akder', 'assets/akder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('akizq', 'assets/akizq.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('ligder', 'assets/ligder.png', { frameWidth: 100, frameHeight: 100 });
    this.load.spritesheet('ligizq', 'assets/ligizq.png', { frameWidth: 100, frameHeight: 100 });
}

function create ()
{
    //  A simple background for our game
    this.add.image(960, 540, 'fondo');

    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = this.physics.add.staticGroup();

    //  Here we create the ground.
    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    platforms.create(960, 920, 'suelo');

    //  Now let's create some ledges
    platforms.create(160, 890, 'escalera1');
    platforms.create(250, 845, 'escaleradefault');
    platforms.create(305, 800, 'escaleradefault');
    platforms.create(355, 755, 'escaleradefault');
    platforms.create(410, 710, 'escaleradefault');
    platforms.create(470, 665, 'escaleradefault');


    // The player and its settings
    player = this.physics.add.sprite(100, 450, 'dude');

    //  Player physics properties. Give the little guy a slight bounce.
    player.setBounce(0.2);
    player.setCollideWorldBounds(true);

    //  Our player animations, turning, walking left and walking right.
    // ANIMACIONES DE ANDAR
    this.anims.create({
        key: 'left',
        frames: this.anims.generateFrameNumbers('mainchizq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'right',
        frames: this.anims.generateFrameNumbers('mainch', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'turn',
        frames: [ { key: 'mainch', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'turnizq',
        frames: [ { key: 'mainchizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'saltoturnizq',
        frames: [ { key: 'mainchizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'saltoturnder',
        frames: [ { key: 'mainch', frame: 2 } ],
        frameRate: 5
    });
    // ANIMACIONES DE GLOCK
    this.anims.create({
        key: 'glockleft',
        frames: this.anims.generateFrameNumbers('glockizq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'glockright',
        frames: this.anims.generateFrameNumbers('glockder', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'glockturn',
        frames: [ { key: 'glockder', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'glockturnizq',
        frames: [ { key: 'glockizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'glocksaltoturnizq',
        frames: [ { key: 'glockizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'glocksaltoturnder',
        frames: [ { key: 'glockder', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'glockdisparoglckizq',
        frames: [ { key: 'glockizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'glockdisparoglockder',
        frames: [ { key: 'glockder', frame: 2 } ],
        frameRate: 5
    });
// ANIMACIONES MANGUM
    this.anims.create({
        key: 'mangumleft',
        frames: this.anims.generateFrameNumbers('mangumizq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'mangumright',
        frames: this.anims.generateFrameNumbers('mangumder', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'mangumturn',
        frames: [ { key: 'mangumder', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'mangumturnizq',
        frames: [ { key: 'mangumizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'mangumsaltoturnizq',
        frames: [ { key: 'mangumizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'mangumsaltoturnder',
        frames: [ { key: 'mangumder', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'mangumdisparoglckizq',
        frames: [ { key: 'mangumizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'mangumdisparoglockder',
        frames: [ { key: 'mangumder', frame: 2 } ],
        frameRate: 5
    });
    // ANIMACIONES ESCOP

    this.anims.create({
        key: 'escopleft',
        frames: this.anims.generateFrameNumbers('escopizq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'escopright',
        frames: this.anims.generateFrameNumbers('escopder', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'escopturn',
        frames: [ { key: 'mangumder', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'escopturnizq',
        frames: [ { key: 'mangumizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'escopsaltoturnizq',
        frames: [ { key: 'mangumizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'escopsaltoturnder',
        frames: [ { key: 'mangumder', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'escopdisparoglckizq',
        frames: [ { key: 'mangumizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'escopdisparoglockder',
        frames: [ { key: 'mangumder', frame: 2 } ],
        frameRate: 5
    });
    // ANIMACIONES AK
    this.anims.create({
        key: 'akleft',
        frames: this.anims.generateFrameNumbers('akleft', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'akright',
        frames: this.anims.generateFrameNumbers('akder', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'akturn',
        frames: [ { key: 'akder', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'akturnizq',
        frames: [ { key: 'akizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'aksaltoturnizq',
        frames: [ { key: 'akizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'aksaltoturnder',
        frames: [ { key: 'akder', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'akdisparoglckizq',
        frames: [ { key: 'akizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'akdisparoglockder',
        frames: [ { key: 'akder', frame: 2 } ],
        frameRate: 5
    });
    //ANIMACIONES M4
    this.anims.create({
        key: 'm4left',
        frames: this.anims.generateFrameNumbers('m4izq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'm4right',
        frames: this.anims.generateFrameNumbers('m4der', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'm4turn',
        frames: [ { key: 'm4der', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'm4turnizq',
        frames: [ { key: 'm4izq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'm4saltoturnizq',
        frames: [ { key: 'm4izq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'm4saltoturnder',
        frames: [ { key: 'm4der', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'm4disparoglckizq',
        frames: [ { key: 'm4izq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'm4disparoglockder',
        frames: [ { key: 'm4der', frame: 2 } ],
        frameRate: 5
    });
    //ANIMACIONES UZI
    this.anims.create({
        key: 'uzileft',
        frames: this.anims.generateFrameNumbers('uziizq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'uziright',
        frames: this.anims.generateFrameNumbers('uzider', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'uziturn',
        frames: [ { key: 'uzider', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'uziturnizq',
        frames: [ { key: 'uziizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'uzisaltoturnizq',
        frames: [ { key: 'uziizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'uzisaltoturnder',
        frames: [ { key: 'uzider', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'uzidisparoglckizq',
        frames: [ { key: 'uziizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'uzidisparoglockder',
        frames: [ { key: 'uzider', frame: 2 } ],
        frameRate: 5
    });
    //ANIMACIONES LIG
    this.anims.create({
        key: 'ligleft',
        frames: this.anims.generateFrameNumbers('ligizq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'ligright',
        frames: this.anims.generateFrameNumbers('ligder', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'ligturn',
        frames: [ { key: 'ligder', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'ligturnizq',
        frames: [ { key: 'ligizq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'ligsaltoturnizq',
        frames: [ { key: 'ligizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'ligsaltoturnder',
        frames: [ { key: 'ligder', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'ligdisparoglckizq',
        frames: [ { key: 'ligizq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'ligdisparoglockder',
        frames: [ { key: 'ligder', frame: 2 } ],
        frameRate: 5
    });
    //ANIMACIONES V2
    this.anims.create({
        key: 'v2left',
        frames: this.anims.generateFrameNumbers('v2izq', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'v2right',
        frames: this.anims.generateFrameNumbers('v2der', { start: 0, end: 3 }),
        frameRate: 5,
        repeat: -1
    });

    this.anims.create({
        key: 'v2turn',
        frames: [ { key: 'v2der', frame: 1 } ],
        frameRate: 5
    });

    this.anims.create({
        key: 'v2turnizq',
        frames: [ { key: 'v2izq', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'v2saltoturnizq',
        frames: [ { key: 'v2izq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'v2saltoturnder',
        frames: [ { key: 'v2der', frame: 2 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'v2disparoglckizq',
        frames: [ { key: 'v2izq', frame: 1 } ],
        frameRate: 5
    });
    this.anims.create({
        key: 'v2disparoglockder',
        frames: [ { key: 'v2der', frame: 2 } ],
        frameRate: 5
    });

    //  Input Events
    cursors = this.input.keyboard.createCursorKeys();

    //  Some stars to collect, 12 in total, evenly spaced 70 pixels apart along the x axis
    stars = this.physics.add.group({
        key: 'star',
        repeat: 11,
        setXY: { x: 12, y: 0, stepX: 70 }
    });

    stars.children.iterate(function (child) {

        //  Give each star a slightly different bounce
        child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));

    });

    bombs = this.physics.add.group();

    //  The score
    scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

    //  Collide the player and the stars with the platforms
    this.physics.add.collider(player, platforms);
    this.physics.add.collider(stars, platforms);
    this.physics.add.collider(bombs, platforms);

    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    this.physics.add.overlap(player, stars, collectStar, null, this);

    this.physics.add.collider(player, bombs, hitBomb, null, this);
}

function update ()
{
    if (gameOver)
    {
        return;
    }

    if (cursors.left.isDown && player.body.touching.down)
    {
        player.setVelocityX(-160);

        player.anims.play('left', true);
    }
    else if (cursors.right.isDown && player.body.touching.down)
    {
        player.setVelocityX(160);

        player.anims.play('right', true);
    }
    else
    {
        player.setVelocityX(0);
        player.anims.play('turn', true);
    }

    if (cursors.up.isDown && player.body.touching.down)
    {
        player.setVelocityY(-200);
    }
    if (!player.body.touching.down && cursors.left.isDown)
    {
        player.anims.play('saltoturnizq', true);
        player.setVelocityX(-160);
    }
    if (!player.body.touching.down && cursors.right.isDown)
    {
        player.anims.play('saltoturnder', true);
        
        player.setVelocityX(160);
    }
  
}

function collectStar (player, star)
{
    star.disableBody(true, true);

    //  Add and update the score
    score += 10;
    scoreText.setText('Score: ' + score);

    if (stars.countActive(true) === 0)
    {
        //  A new batch of stars to collect
        stars.children.iterate(function (child) {

            child.enableBody(true, child.x, 0, true, true);

        });

        var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);

        var bomb = bombs.create(x, 16, 'bomb');
        bomb.setBounce(1);
        bomb.setCollideWorldBounds(true);
        bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
        bomb.allowGravity = false;

    }
}

function hitBomb (player, bomb)
{
    this.physics.pause();

    player.setTint(0xff0000);

    player.anims.play('turn');

    gameOver = true;
}

</script>

</body>
</html>
